{"version":3,"sources":["index.tsx"],"names":["a","fetch","test","json","ok","alert","connection","ClientMsg","text","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAIgB,uCAAG,8BAAAA,EAAA,sEACEC,MAAM,eADR,cACXC,EADW,gBAEEA,EAAKC,OAFP,OAEXA,EAFW,OAKZD,EAAKE,IAAIC,MAAM,+BAGpBA,MAAMF,GARW,2CAAH,qDAWhBG,GAMA,IAAMC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAAuC,8BAAMA,KAE/DC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACJ,EAAD,CAAWC,KAAK,wBAElBI,SAASC,eAAe,W","file":"static/js/main.41a933e0.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// TEST Server connection - Delete or comment out when verified\nconst connection = async ():Promise<any> => {\n  const test = await fetch('/connection');\n  const json = await test.json();\n\n  // eslint-disable-next-line no-alert\n  if (!test.ok) alert('Could not connect to Server');\n\n  // eslint-disable-next-line no-alert\n  alert(json);\n};\n\nconnection();\n\ntype ClientText = {\n  text: string\n}\n\nconst ClientMsg = ({ text }: ClientText): JSX.Element => <div>{text}</div>;\n\nReactDOM.render(\n  <React.StrictMode>\n    <ClientMsg text=\"Client is running\" />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}